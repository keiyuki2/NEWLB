// types/supabase.ts
// This file is intended to hold the Database interface generated by Supabase CLI or manually defined.

import { 
    Player, Clan, WorldRecord, Badge, Submission, SiteSettings, UsernameColorTag, 
    Message, Conversation, Announcement, CollectionRank, SubmissionData, PlayerStats,
    ClanMember // Ensure ClanMember is imported if defined in types.ts or define it here
} from '../types'; // Adjust path as needed

// Define Insert and Update types more precisely. Supabase auto-generates some fields like id, created_at.
// For Player, 'id' comes from auth.users.id and is required on insert.
type PlayerInsert = Omit<Player, 'lastActive' | 'joinedDate' | 'badges' | 'stats' | 'clanId' | 'customAvatarUrl' | 'customProfileBannerUrl' | 'canSetCustomBanner' | 'socialLinks' | 'pronouns' | 'location' | 'bio' | 'isVerifiedPlayer' | 'selectedUsernameTagId' | 'isBlacklisted'> & { stats: PlayerStats, badges: string[], created_at?: string, updated_at?: string };
type PlayerUpdate = Partial<Omit<Player, 'id' | 'email' | 'robloxId' | 'joinedDate'> & {created_at?: string, updated_at?: string}>; // id, email, robloxId are usually not updatable this way

type ClanInsert = Omit<Clan, 'id' | 'memberCount' | 'members' | 'foundedDate' | 'created_at' | 'updated_at'> & { leader_id: string; activity_status?: string; is_verified?: boolean; requirements_to_join?: string; banner_url?: string };
type ClanUpdate = Partial<Omit<Clan, 'id' | 'leaderId' | 'foundedDate' | 'created_at' | 'updated_at' | 'memberCount' | 'members'>>;

type WorldRecordInsert = Omit<WorldRecord, 'id' | 'timestamp' | 'created_at' | 'updated_at'> & { player_id: string; is_verified?: boolean };
type WorldRecordUpdate = Partial<Omit<WorldRecord, 'id' | 'playerId' | 'timestamp' | 'created_at' | 'updated_at'>>;

type BadgeInsert = Omit<Badge, 'id' | 'created_at' | 'updated_at'>;
type BadgeUpdate = Partial<Omit<Badge, 'id' | 'created_at' | 'updated_at'>>;

type PlayerBadgeRow = { player_id: string; badge_id: string; earned_at: string };
type PlayerBadgeInsert = { player_id: string; badge_id: string; earned_at?: string };

// For Submission, Insert might omit status and moderatorReason, as they are set during processing or default.
type SubmissionInsert = Omit<Submission<SubmissionData>, 'id' | 'submissionDate' | 'status' | 'moderatorReason' | 'created_at' | 'updated_at'> & {data: any}; // Using any for data for simplicity given its generic nature
type SubmissionUpdate = Partial<Omit<Submission<SubmissionData>, 'id' | 'type' | 'submittedBy' | 'submissionDate' | 'created_at' | 'updated_at'> & {data: any}>;

type SiteSettingsRow = SiteSettings & { id: boolean }; // Ensure id is present and typed for single-row tables
type SiteSettingsInsert = SiteSettings; // id might be managed by RLS or default value
type SiteSettingsUpdate = Partial<SiteSettings>;

type UsernameColorTagInsert = Omit<UsernameColorTag, 'id' | 'created_at'>;
type UsernameColorTagUpdate = Partial<Omit<UsernameColorTag, 'id' | 'created_at'>>;

type MessageInsert = Omit<Message, 'id' | 'timestamp' | 'created_at'>;
// MessageUpdate typically not needed for chat apps, but can be Partial<Message>

type ConversationInsert = Omit<Conversation, 'id' | 'created_at' | 'updated_at'>;
type ConversationUpdate = Partial<Omit<Conversation, 'id' | 'participantIds' | 'created_at' | 'updated_at'>>;

type AnnouncementInsert = Omit<Announcement, 'id' | 'creationDate' | 'created_at' | 'updated_at' | 'isActive'> & { is_active?: boolean, display_until?: string };
type AnnouncementUpdate = Partial<Omit<Announcement, 'id' | 'creationDate' | 'created_at' | 'updated_at'>>;

type CollectionRankInsert = Omit<CollectionRank, 'id' | 'created_at'>;
type CollectionRankUpdate = Partial<Omit<CollectionRank, 'id' | 'created_at'>>;

type ClanMemberInsert = Omit<ClanMember, 'joined_at' | 'id'> & { joined_at?: string };
type ClanMemberUpdate = Partial<Omit<ClanMember, 'clan_id' | 'player_id' | 'joined_at' | 'id'>>;


export interface Database {
  public: {
    Tables: {
      players: {
        Row: Player;
        Insert: PlayerInsert;
        Update: PlayerUpdate;
      };
      clans: {
        Row: Clan;
        Insert: ClanInsert;
        Update: ClanUpdate;
      };
      world_records: {
        Row: WorldRecord;
        Insert: WorldRecordInsert;
        Update: WorldRecordUpdate;
      };
      badges: {
        Row: Badge;
        Insert: BadgeInsert;
        Update: BadgeUpdate;
      };
      player_badges: {
        Row: PlayerBadgeRow;
        Insert: PlayerBadgeInsert;
        Update: Partial<PlayerBadgeRow>;
      };
      submissions: {
        Row: Submission<SubmissionData>;
        Insert: SubmissionInsert;
        Update: SubmissionUpdate;
      };
      site_settings: {
        Row: SiteSettingsRow;
        Insert: SiteSettingsInsert;
        Update: SiteSettingsUpdate;
      };
      username_color_tags: {
        Row: UsernameColorTag;
        Insert: UsernameColorTagInsert;
        Update: UsernameColorTagUpdate;
      };
      messages: {
        Row: Message;
        Insert: MessageInsert;
        Update: Partial<Message>; // Typically not updated
      };
      conversations: {
        Row: Conversation;
        Insert: ConversationInsert;
        Update: ConversationUpdate;
      };
      announcements: {
        Row: Announcement;
        Insert: AnnouncementInsert;
        Update: AnnouncementUpdate;
      };
      collection_ranks: {
        Row: CollectionRank;
        Insert: CollectionRankInsert;
        Update: CollectionRankUpdate;
      };
      clan_members: {
        Row: ClanMember;
        Insert: ClanMemberInsert;
        Update: ClanMemberUpdate;
      };
    };
    Views: {
      // Define your views here if any
    };
    Functions: {
      // Define your RPC functions here if any
    };
  };
}
